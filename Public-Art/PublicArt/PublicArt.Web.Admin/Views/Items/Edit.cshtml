@model PublicArt.Web.Admin.ViewModels.ItemEditViewModel

@{
    ViewBag.Title = Model.Reference;
}

<div class="jumbotron">
    <h1>Editing item: @Model.Reference</h1>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row">
    <div class="col-md-5 col-md-push-7">
        
        <div class="panel panel-default collapsable">
            <div class="panel-heading" data-toggle="collapse" data-target="#imagePanelCollapse">
                <h3 class="panel-title">
                    <span class="glyphicon glyphicon-picture" aria-hidden="true"></span> Images
                </h3>
            </div>
            <div id="imagePanelCollapse" class="panel-collapse collapse in">
                <div class="panel-body">
                    <table class="table table-condensed">
                        <colgroup>
                            <col class="col-sm-2">
                            <col class="col-sm-7">
                            <col class="col-sm-1">
                        </colgroup>
                        <tbody>
                        @Html.EditorFor(x => x.Images)
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="panel-footer clearfix">
                <div class="pull-right">
                    <div class="form-inline">
                        <div class="input-group">
                            <span class="input-group-btn">
                                <input type="file" class="form-control input-sm" id="newImageFile" accept=".jpg,.jpeg" />
                            </span>
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-success btn-sm" id="newImageUpload">Upload</button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="panel panel-default collapsable">
            <div class="panel-heading" data-toggle="collapse" data-target="#artistsPanelCollapse">
                <h3 class="panel-title">
                    <span class="glyphicon glyphicon-user" aria-hidden="true"></span> Artists
                </h3>
            </div>
            <div id="artistsPanelCollapse" class="panel-collapse collapse in">
                <div class="panel-body">
                    <ul class="list-group">
                        @foreach (var artist in Model.Artists)
                        {
                            <li class="list-group-item">
                                <strong>@Html.ActionLink(artist.Name, "Edit", "Artists", new {id = artist.ArtistId}, null)</strong> <small>@artist.Notes</small>
                                <button type="button" class="close itemArtistDelete" data-deleteuri="@Url.Action("Delete", "ItemArtists", new {itemId = Model.ItemId, artistId = artist.ArtistId})" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="panel-footer clearfix">
                <div class="pull-right">
                    <div class="form-inline">
                        <div class="input-group">
                            <span class="input-group-btn">
                                    <select class="form-control input-sm" id="newArtistId" required>
                                        <option value="" disabled hidden selected>Artist...</option>
                                        @foreach (var a in Model.ArtistDictionary)
                                        {
                                            <option value="@a.Key">@a.Value</option>
                                        }
                                    </select>
                                </span>

                            <span class="input-group-btn">
                                    <input type="text" class="form-control input-sm" id="newArtistNotes" placeholder="Notes (optional)" autocomplete="off" />
                                </span>
                            <span class="input-group-btn">
                                    <button type="button" class="btn btn-success btn-sm" id="newArtistAdd">Add</button>
                                </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="panel panel-default collapsable">
            <div class="panel-heading" data-toggle="collapse" data-target="#categoriesPanelCollapse">
                <h3 class="panel-title">
                    <span class="glyphicon glyphicon-th" aria-hidden="true"></span> Categories
                </h3>
            </div>
            <div id="categoriesPanelCollapse" class="panel-collapse collapse in">
                <div class="panel-body categorypanel">
                    <ul class="list-inline">
                        @foreach (var category in Model.Categories)
                        {
                            <li class="label label-info categorytag">
                                @category.Value
                                <span class="itemCategoryDelete" data-deleteuri="@Url.Action("Delete", "ItemCategories", new {itemId = Model.ItemId, categoryId = category.Key})">×</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="panel-footer clearfix">
                <div class="pull-right">
                    <div class="form-inline">
                        <div class="input-group">
                            <input type="text" class="form-control input-sm" id="newItemCategory" placeholder="Category" autocomplete="off"/>
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-success btn-sm" id="newCategoryAdd">Add</button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="panel panel-default collapsable">
            <div class="panel-heading" data-toggle="collapse" data-target="#locationPanelCollapse">
                <h3 class="panel-title">
                    <span class="glyphicon glyphicon-map-marker" aria-hidden="true"></span> Location
                </h3>
            </div>
            <div id="locationPanelCollapse" class="panel-collapse collapse in">
                @Html.HiddenFor(model => model.Latitude)
                @Html.HiddenFor(model => model.Longitude)
                <div id="leafletmap"></div>
                <p class="text-center">
                    <small>Click map to place marker. Drag marker to move. <span class="pseudolink" id="removeMapMarker">Click here to delete marker</span>.</small>
                </p>
            </div>
        </div>
    </div>

    <div class="col-md-7 col-md-pull-5">

        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new {@class = "text-danger"})
            @Html.HiddenFor(model => model.ItemId)

            <div class="form-group">
                @Html.LabelFor(model => model.Title, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.Title, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new {htmlAttributes = new {@class = "form-control", @rows = 6}})
                    @Html.ValidationMessageFor(model => model.Description, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Date, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Date, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.Date, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UnveilingYear, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UnveilingYear, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.UnveilingYear, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UnveilingDetails, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UnveilingDetails, new {htmlAttributes = new {@class = "form-control", @rows = 6}})
                    @Html.ValidationMessageFor(model => model.UnveilingDetails, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Statement, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Statement, new {htmlAttributes = new {@class = "form-control", @rows = 6}})
                    @Html.ValidationMessageFor(model => model.Statement, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Material, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Material, new {htmlAttributes = new {@class = "form-control", @rows = 6}})
                    @Html.ValidationMessageFor(model => model.Material, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Inscription, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Inscription, new {htmlAttributes = new {@class = "form-control", @rows = 6}})
                    @Html.ValidationMessageFor(model => model.Inscription, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.History, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.History, new {htmlAttributes = new {@class = "form-control", @rows = 6}})
                    @Html.ValidationMessageFor(model => model.History, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Notes, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Notes, new {htmlAttributes = new {@class = "form-control", @rows = 6}})
                    @Html.ValidationMessageFor(model => model.Notes, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.WebsiteUrl, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.WebsiteUrl, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.WebsiteUrl, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Size", new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-addon">@Html.DisplayNameFor(model => model.Height)</span>
                                @Html.EditorFor(model => model.Height, new {htmlAttributes = new {@class = "form-control"}})
                                <span class="input-group-addon" id="basic-addon2">cm</span>
                            </div>
                            @Html.ValidationMessageFor(model => model.Height, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-addon">@Html.DisplayNameFor(model => model.Width)</span>
                                @Html.EditorFor(model => model.Width, new {htmlAttributes = new {@class = "form-control"}})
                                <span class="input-group-addon" id="basic-addon2">cm</span>
                            </div>
                            @Html.ValidationMessageFor(model => model.Width, "", new {@class = "text-danger"})
                        </div>
                    </div>

                </div>
            </div>
            <div class="form-group">
                <div class="col-md-10 col-md-offset-2">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-addon">@Html.DisplayNameFor(model => model.Depth)</span>
                                @Html.EditorFor(model => model.Depth, new {htmlAttributes = new {@class = "form-control"}})
                                <span class="input-group-addon" id="basic-addon2">cm</span>
                            </div>
                            @Html.ValidationMessageFor(model => model.Depth, "", new {@class = "text-danger"})
                        </div>
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-addon">@Html.DisplayNameFor(model => model.Diameter)</span>
                                @Html.EditorFor(model => model.Diameter, new {htmlAttributes = new {@class = "form-control"}})
                                <span class="input-group-addon" id="basic-addon2">cm</span>
                            </div>
                            @Html.ValidationMessageFor(model => model.Diameter, "", new {@class = "text-danger"})
                        </div>

                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SurfaceCondition, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SurfaceCondition, new {htmlAttributes = new {@class = "form-control", @rows = 6}})
                    @Html.ValidationMessageFor(model => model.SurfaceCondition, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.StructuralCondition, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StructuralCondition, new {htmlAttributes = new {@class = "form-control", @rows = 6}})
                    @Html.ValidationMessageFor(model => model.StructuralCondition, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Address, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Address, new {htmlAttributes = new {@class = "form-control", @rows = 6}})
                    @Html.ValidationMessageFor(model => model.Address, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Archived, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.CheckBoxFor(model => model.Archived, new {data_toggle = "toggle", data_on = "Yes", data_off = "No", data_onstyle = "danger", data_offstyle = "info"})
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    <div class="row">
        <div class="col-md-2 col-md-offset-10">
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-lg btn-success"/>
            </div>
        </div>
    </div>
}

@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@
    <script>
        var Page = {
            init: function() {
                Page.initHandlers();
                Page.func.updatePrimaryButtons();
                Page.ele.$newImageUpload.addClass('disabled');
                Page.ele.$newArtistAdd.addClass('disabled');
                Page.ele.$newCategoryAdd.addClass('disabled');
                Page.ele.$imageThumbLink.featherlight();
                Page.initLeaflet();
                Page.initAutocomplete();
                Page.initDatePickers();
            },
            ele: {
                $ItemImagePrimary: $('.ItemImagePrimary'),
                $newImageFile: $('#newImageFile'),
                $newImageUpload: $('#newImageUpload'),
                $newArtistId: $('#newArtistId'),
                $newArtistNotes: $('#newArtistNotes'),
                $newArtistAdd: $('#newArtistAdd'),
                $newCategoryAdd: $('#newCategoryAdd'),
                $newItemCategory: $('#newItemCategory'),
                $itemArtistDelete: $('.itemArtistDelete'),
                $itemImageDelete: $('.itemImageDelete'),
                $itemCategoryDelete: $('.itemCategoryDelete'),
                $imageThumbLink: $('.imageThumbLink'),
                $inDate: $('#Date'),
                $inUnveilingYear: $('#UnveilingYear'),
                $inLatitude: $('#Latitude'),
                $inLongitude: $('#Longitude'),
                $removeMapMarker: $('#removeMapMarker')
            },
            func: {
                updatePrimaryButtons: function() {
                    Page.ele.$ItemImagePrimary
                        .removeClass('btn-primary')
                        .addClass('btn-default')
                        .each(function() {
                            var $this = $(this);
                            if ($('#' + $this.data('controlid')).val() === 'True') {
                                $this.removeClass('btn-default').addClass('btn-primary');
                            }
                        });
                },
                roundToDP: function(i, d) {
                    return Math.round(i * Math.pow(10, d)) / Math.pow(10, d);
                },
                getLatLngFromInput() {
                    if (Page.ele.$inLatitude.val() && Page.ele.$inLongitude.val())
                        return [Page.ele.$inLatitude.val(), Page.ele.$inLongitude.val()];
                    return false;
                },
                setInputFromLatLng(latLng) {
                    Page.ele.$inLatitude.val(Page.func.roundToDP(latLng.lat, 6));
                    Page.ele.$inLongitude.val(Page.func.roundToDP(latLng.lng, 6));
                },
                createMarker(latLng) {
                    console.log('creating marker at:', latLng);
                    Page.marker = L.marker(latLng, {
                        icon: L.icon({
                            iconUrl: '/Content/images/marker-icon.png',
                            shadowUrl: '/Content/images/marker-shadow.png',
                            iconSize: [25, 41],
                            iconAnchor: [12, 41],
                            popupAnchor: [1, -34],
                            shadowSize: [41, 41]
                        }),
                        draggable: true
                    }).addTo(Page.map);
                    Page.marker.on('dragend', function() {
                        Page.func.setInputFromLatLng(this.getLatLng());
                    });
                },
                removeMarker() {
                    Page.map.removeLayer(Page.marker);
                    Page.ele.$inLatitude.val('');
                    Page.ele.$inLongitude.val('');
                    Page.map.addOneTimeEventListener('click', function(e) {
                        Page.func.createMarker(e.latlng);
                        Page.func.setInputFromLatLng(e.latlng);
                    });
                }
            },
            initHandlers: function() {
                Page.ele.$ItemImagePrimary.click(function() {
                    Page.ele.$ItemImagePrimary
                        .each(function() {
                            $('#' + $(this).data('controlid')).val('False');
                        });
                    $('#' + $(this)
                        .data('controlid')
                    ).val('True');
                    Page.func.updatePrimaryButtons();
                });

                Page.ele.$newImageFile.on('change', function() {
                    if (this.files.length > 0) {
                        Page.imageFile = this.files[0];
                        Page.ele.$newImageUpload.removeClass('disabled');
                    } else {
                        Page.imageFile = null;
                        Page.ele.$newImageUpload.addClass('disabled');
                    }
                });

                Page.ele.$newImageUpload.click(function() {
                    if (Page.ele.$newImageUpload.hasClass('disabled')) return false;

                    var data = new FormData();
                    data.append('file', Page.imageFile);

                    $.ajax({
                            url: '@Url.Action("Upload", "ItemImages", new {itemId = Model.ItemId})',
                            type: 'POST',
                            data: data,
                            cache: false,
                            processData: false,
                            contentType: false
                        })
                        .done(function() {
                            location.reload(true);
                        })
                        .fail(function(jqXhr, textStatus, errorThrown) {
                            alert('Upload failed!');
                            console.log('failed');
                            console.log('jqXHR:', jqXhr, 'textStatus:', textStatus, 'errorThrown:', errorThrown);
                        });
                    return true;
                });

                Page.ele.$itemImageDelete.click(function() {
                    if (confirm('Are you sure you want to delete this image?')) {
                        $.ajax({
                                url: Page.ele.$itemImageDelete.data('deleteuri'),
                                type: 'POST'
                            })
                            .done(function() {
                                location.reload(true);
                            })
                            .fail(function(jqXhr, textStatus, errorThrown) {
                                alert('Delete failed!');
                                console.log('failed');
                                console.log('jqXHR:', jqXhr, 'textStatus:', textStatus, 'errorThrown:', errorThrown);
                            });
                    }
                });

                Page.ele.$newArtistId.on('change', function() {
                    if ($(this).val() !== '') {
                        Page.ele.$newArtistAdd.removeClass('disabled');
                    } else {
                        Page.ele.$newArtistAdd.addClass('disabled');
                    }
                });

                Page.ele.$newArtistAdd.click(function() {
                    if (Page.ele.$newArtistAdd.hasClass('disabled')) return false;

                    var data = new FormData();
                    data.append('ItemId', @Model.ItemId);
                    data.append('ArtistId', Page.ele.$newArtistId.val());
                    data.append('Notes', Page.ele.$newArtistNotes.val());

                    $.ajax({
                            url: '@Url.Action("Create", "ItemArtists")',
                            type: 'POST',
                            data: data,
                            cache: false,
                            processData: false,
                            contentType: false
                        })
                        .done(function() {
                            location.reload(true);
                        })
                        .fail(function(jqXhr, textStatus, errorThrown) {
                            alert('Add ItemArtist failed!');
                            console.log('failed');
                            console.log('jqXHR:', jqXhr, 'textStatus:', textStatus, 'errorThrown:', errorThrown);
                        });

                    return true;
                });

                Page.ele.$itemArtistDelete.click(function() {
                    if (confirm('Are you sure you want to remove this artist from the item?')) {
                        $.ajax({
                                url: $(this).data('deleteuri'),
                                type: 'POST'
                            })
                            .done(function() {
                                location.reload(true);
                            })
                            .fail(function(jqXhr, textStatus, errorThrown) {
                                alert('Delete failed!');
                                console.log('failed');
                                console.log('jqXHR:', jqXhr, 'textStatus:', textStatus, 'errorThrown:', errorThrown);
                            });
                    }
                });

                Page.ele.$newItemCategory.on('change keyup paste mouseup', function() {
                    if ($(this).val() !== '') {
                        Page.ele.$newCategoryAdd.removeClass('disabled');
                    } else {
                        Page.ele.$newCategoryAdd.addClass('disabled');
                    }
                });

                Page.ele.$newCategoryAdd.click(function() {
                    if (Page.ele.$newCategoryAdd.hasClass('disabled')) return false;

                    var data = new FormData();
                    data.append('itemId', @Model.ItemId);
                    data.append('categoryName', Page.ele.$newItemCategory.val());

                    $.ajax({
                        url: '@Url.Action("Create", "ItemCategories")',
                            type: 'POST',
                            data: data,
                            cache: false,
                            processData: false,
                            contentType: false
                        })
                        .done(function() {
                            location.reload(true);
                        })
                        .fail(function(jqXhr, textStatus, errorThrown) {
                            alert('Add ItemCategory failed!');
                            console.log('failed');
                            console.log('jqXHR:', jqXhr, 'textStatus:', textStatus, 'errorThrown:', errorThrown);
                        });

                    return true;
                });

                Page.ele.$itemCategoryDelete.click(function() {
                    if (confirm('Are you sure you want to remove this category?')) {
                        $.ajax({
                                url: $(this).data('deleteuri'),
                                type: 'POST'
                            })
                            .done(function() {
                                location.reload(true);
                            })
                            .fail(function(jqXhr, textStatus, errorThrown) {
                                alert('Delete failed!');
                                console.log('failed');
                                console.log('jqXHR:', jqXhr, 'textStatus:', textStatus, 'errorThrown:', errorThrown);
                            });
                    }
                });

                Page.ele.$removeMapMarker.click(function() {
                    Page.func.removeMarker();
                });
            },
            imageFile: null,
            initLeaflet: function() {
                Page.map = L.map('leafletmap').setView([51.3712403, -2.4936262], 11);
                L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
                }).addTo(Page.map);

                if (Page.func.getLatLngFromInput()) {
                    Page.func.createMarker(Page.func.getLatLngFromInput());
                } else {
                    Page.map.addOneTimeEventListener('click', function(e) {
                        Page.func.createMarker(e.latlng);
                        Page.func.setInputFromLatLng(e.latlng);
                    });
                }
            },
            initAutocomplete: function() {
                $.getJSON('@Url.Action("GetAll", "Categories")', null, function(data) {
                    Page.categories = data;

                    Page.ele.$newItemCategory.autocomplete({
                        source: function(request, response) {
                            var results = $.ui.autocomplete.filter(Page.categories, request.term);

                            response(results.slice(0, 10));
                        }
                    });
                });

                
            },
            initDatePickers: function() {
                Page.ele.$inDate.datepicker( {
                    format: "yyyy",
                    viewMode: "years", 
                    minViewMode: "years"
                });

                Page.ele.$inUnveilingYear.datepicker( {
                    format: "yyyy",
                    viewMode: "years", 
                    minViewMode: "years"
                });
            },
            map: null,
            marker: null,
            categories: null
        };

        $(document).ready(function() {
            Page.init();
        });
    </script>
}